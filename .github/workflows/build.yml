name: Build docker image and push to gcr.io

on:
  push:
    branches:
      - master
      - develop

env:
  IMAGE_NAME: postfix-exporter
  GCP_MASTER_PROJECT: myonlinestore-eu
  GCP_DEVELOP_PROJECT: myonlinestore-dev
  DOCKER_REPOSITORY: eu.gcr.io
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Setup gcloud CLI
      - name: Setup gcloud master CLI
        uses: google-github-actions/setup-gcloud@master
        if: github.ref == 'refs/heads/master'
        with:
          version: "365.0.1"
          service_account_key: ${{ secrets.GKE_KEY }}

      - name: Setup gcloud develop CLI
        uses: google-github-actions/setup-gcloud@master
        if: github.ref == 'refs/heads/develop'
        with:
          version: "365.0.1"
          service_account_key: ${{ secrets.GKE_DEVELOP_KEY }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Setup docker auhtentication
        run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker

      - name: Build and Push Docker image
        run: |
            tag=$(cat ./Dockerfile | grep "# tag:" | cut -d':' -f2 | xargs)
            if [ -z "$tag" ]; then
              echo "Missing '# tag: ...' comment in the Dockerfile"
              exit 1
            fi
            PROJECT="$GCP_DEVELOP_PROJECT"
            if [ "$GITHUB_REF" == "refs/heads/master" ]; then
              PROJECT="$GCP_MASTER_PROJECT"
            fi
            image="$DOCKER_REPOSITORY/$PROJECT/$IMAGE_NAME:$tag"

            # Check if tag already exists
            if gcloud container images describe $image &> /dev/null ; then
              echo "Image $image already exists"
            else
              echo "Build and push image $image"
              docker build -t $image --label GITHUB_SHA="$GITHUB_SHA" --label GITHUB_REF="$GITHUB_REF" .
              docker push $image
            fi
